{"version":3,"sources":["TodoBanner.js","TodoCreator.js","SimpleMenu.js","TodoRow.js","VisibilityControl.js","App.js","serviceWorker.js","index.js"],"names":["TodoBanner","props","tourTrigger","setState","isTourOpen","closeTour","state","this","tasks","filter","t","done","length","className","name","IconButton","onClick","href","steps","isOpen","onRequestClose","Component","content","selector","TodoCreator","updateNewTextValue","event","newItemText","target","value","createNewTodo","callback","onChange","data-tut","clearCallBack","SimpleMenu","React","useState","anchorEl","setAnchorEl","visibleHigh","setVisibleHigh","visibleMed","setVisibleMed","visibleLow","setVisibleLow","aria-controls","aria-haspopup","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","TodoRow","item","action","type","checked","VisibilityControl","isChecked","e","description","App","newItem","task","todoItems","find","toggleTodo","todo","map","todoTableRows","doneValue","key","clearAll","userName","showCompleted","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7af3b852.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { IconButton } from '@material-ui/core';\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport \"./App.css\";\r\nimport Tour from 'reactour'\r\n\r\nexport class TodoBanner extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isTourOpen: false\r\n        }\r\n    }\r\n\r\n    tourTrigger = () =>\r\n        this.setState({isTourOpen: true})\r\n\r\n    closeTour = () =>\r\n        this.setState({isTourOpen: false})\r\n\r\n  render (){\r\n    if(this.props.tasks.filter(t => !t.done).length > 10){\r\n      return(        \r\n        <div>\r\n              <h4 className=\"bg-danger text-white text-center p-4\">\r\n                  {this.props.name} Todo List\r\n                  ({this.props.tasks.filter(t => !t.done).length} items to do)\r\n                 \r\n                  <IconButton onClick={this.tourTrigger}>\r\n                      <InfoOutlinedIcon/>\r\n                  </IconButton>\r\n                  <a href= \"https://github.com/ishan-singh-3005/\">\r\n                    <GitHubIcon className=\"git\"/>\r\n                  </a>\r\n              </h4> \r\n                           \r\n              \r\n              <Tour\r\n                  steps={steps}\r\n                  isOpen={this.state.isTourOpen}\r\n                  onRequestClose={this.closeTour} />\r\n        </div>  \r\n      \r\n    )\r\n      }else if(this.props.tasks.filter(t => !t.done).length <= 10 && this.props.tasks.filter(t => !t.done).length > 0) {\r\n        return(        \r\n          <div>\r\n                <h4 className=\"bg-warning text-white text-center p-4\">\r\n                    {this.props.name} Todo List\r\n                    ({this.props.tasks.filter(t => !t.done).length} items to do)\r\n                   \r\n                    <IconButton onClick={this.tourTrigger}>\r\n                        <InfoOutlinedIcon/>\r\n                    </IconButton>\r\n                    <a href= \"https://github.com/ishan-singh-3005/todo-app\">\r\n                      <GitHubIcon className=\"git\"/>\r\n                    </a>\r\n                </h4>               \r\n                \r\n                <Tour\r\n                    steps={steps}\r\n                    isOpen={this.state.isTourOpen}\r\n                    onRequestClose={this.closeTour} />\r\n          </div>\r\n        \r\n      )\r\n      }else{\r\n        return(        \r\n          <div>\r\n                <h4 className=\"bg-success text-white text-center p-4\">\r\n                    {this.props.name} Todo List\r\n                    ({this.props.tasks.filter(t => !t.done).length} items to do)\r\n                   \r\n                    <IconButton onClick={this.tourTrigger}>\r\n                        <InfoOutlinedIcon/>\r\n                    </IconButton>\r\n                    <a href= \"https://github.com/ishan-singh-3005/todo-app\">\r\n                      <GitHubIcon className=\"git\"/>\r\n                    </a>\r\n                </h4>               \r\n                \r\n                <Tour\r\n                    steps={steps}\r\n                    isOpen={this.state.isTourOpen}\r\n                    onRequestClose={this.closeTour} />\r\n          </div>\r\n        \r\n      )\r\n      }\r\n}; \r\n}    \r\n\r\nconst steps = [\r\n    {\r\n        content: 'Welcome to my task manager',\r\n    },\r\n    {\r\n      selector: '[data-tut=\"addTask\"]',\r\n      content: 'Write a task in the box above and click this to add the task',\r\n    },\r\n    {\r\n      selector: '[data-tut=\"clearAll\"]',\r\n      content: 'Clear all you tasks, done and not done',\r\n    },\r\n    {\r\n      selector: '[data-tut=\"tag\"]',\r\n      content: 'Add priority tags to you tasks using this',\r\n    },\r\n    {\r\n      selector: '[data-tut=\"doneTask\"]',\r\n      content: 'Check this box to send task to completed section',\r\n    },\r\n    {\r\n      selector: '[data-tut=\"toggleDone\"]',\r\n      content: 'Choose to see your completed tasks',\r\n    },\r\n    {\r\n      content: 'Thank you for touring the app',\r\n    }\r\n    \r\n  ]","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nexport class TodoCreator extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            newItemText: \"\"\r\n        }\r\n    }\r\n\r\n    updateNewTextValue = (event) =>{\r\n        this.setState({newItemText: event.target.value});\r\n      }\r\n    \r\n    createNewTodo = () => {\r\n        this.props.callback(this.state.newItemText);\r\n        this.setState({newItemText:\"\"});\r\n    }\r\n\r\n      render (){\r\n        return(\r\n            <div className=\"my-1\">\r\n            <input className=\"form-control\" value={this.state.newItemText}\r\n                onChange={this.updateNewTextValue} />\r\n            <button className=\"btn btn-primary mt-1 mb-4\" \r\n                onClick={this.createNewTodo}\r\n                data-tut=\"addTask\">Add</button>\r\n            <button className=\"btn btn-sm btn-danger mb-3 ml-5\"\r\n                onClick={this.props.clearCallBack}\r\n                data-tut=\"clearAll\">Clear All</button>            \r\n        </div>\r\n        )\r\n    };\r\n}","import React from 'react';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { IconButton } from '@material-ui/core';\r\nimport PriorityHighIcon from '@material-ui/icons/PriorityHigh';\r\n\r\nexport default function SimpleMenu() {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [visibleHigh, setVisibleHigh] = React.useState(false);\r\n  const [visibleMed, setVisibleMed] = React.useState(false);\r\n  const [visibleLow, setVisibleLow] = React.useState(false);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleHigh = () => {\r\n    setAnchorEl(null);\r\n    setVisibleHigh(true);\r\n    setVisibleMed(false);\r\n    setVisibleLow(false);\r\n  };\r\n\r\n  const handleMed = () => {\r\n    setAnchorEl(null);\r\n    setVisibleMed(true);\r\n    setVisibleLow(false);\r\n    setVisibleHigh(false);\r\n  };\r\n\r\n  const handleLow = () => {\r\n    setAnchorEl(null);\r\n    setVisibleLow(true);\r\n    setVisibleHigh(false);\r\n    setVisibleMed(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <IconButton aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\r\n          <PriorityHighIcon data-tut=\"tag\"/>\r\n      </IconButton>\r\n      <Menu\r\n        id=\"simple-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n      >\r\n        <MenuItem onClick={handleHigh}>High</MenuItem>\r\n        <MenuItem onClick={handleMed}>Medium</MenuItem>\r\n        <MenuItem onClick={handleLow}>Low</MenuItem>\r\n      </Menu>\r\n    {visibleHigh ? <button className=\"btn btn-sm btn-danger\">High</button> : null}\r\n    {visibleMed ? <button className=\"btn btn-sm btn-warning\">Medium</button> : null}\r\n    {visibleLow ? <button className=\"btn btn-sm btn-success\">Low</button> : null}\r\n    </div>\r\n  );\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport SimpleMenu from './SimpleMenu';\r\n\r\nexport class TodoRow extends Component {\r\n    \r\n    render (){\r\n        return(\r\n            <tr>\r\n                <td>\r\n                    {this.props.item.action} <br/>\r\n                    <SimpleMenu/>                  \r\n                </td>\r\n                <td>\r\n                    <input type=\"checkbox\" checked= {this.props.item.done}\r\n                    onChange= {() => this.props.callback(this.props.item)}\r\n                    data-tut=\"doneTask\"/>\r\n                </td>\r\n             </tr>\r\n        )\r\n    };\r\n        \r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nexport class VisibilityControl extends Component {\r\n\r\n  render (){\r\n      return(\r\n          <div className=\"form-check\">\r\n            <input className=\"form-check-input\" type=\"checkbox\"\r\n                checked={this.props.isChecked}\r\n                onChange={ (e) => this.props.callback(e.target.checked)}\r\n                data-tut=\"toggleDone\" />\r\n            <label className=\"form-check-label\">\r\n                Show {this.props.description}\r\n            </label>\r\n          </div>\r\n      )\r\n  };\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { TodoBanner } from \"./TodoBanner\";\r\nimport { TodoCreator } from \"./TodoCreator\";\r\nimport { TodoRow } from \"./TodoRow\";\r\nimport { VisibilityControl } from \"./VisibilityControl\";\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      userName: \"Your\",\r\n      todoItems: [{action: \"do this\", done: false},\r\n                  {action: \"do that\", done: true},\r\n                  {action: \"do that again\", done: false}],\r\n      showCompleted: true\r\n    }\r\n  }\r\n\r\n  updateNewTextValue = (event) =>{\r\n    this.setState({newItem: event.target.value});\r\n  }\r\n\r\n  createNewTodo = (task) => {\r\n    if(!this.state.todoItems.find(item => item.action === task)){\r\n        this.setState({\r\n          todoItems: [...this.state.todoItems, \r\n          {action: task, done: false}]\r\n        })\r\n      }\r\n  }\r\n\r\n  toggleTodo = (todo) => this.setState({todoItems: \r\n    this.state.todoItems.map(item => item.action === todo.action \r\n      ? {...item, done: !item.done} : item)});\r\n\r\n  todoTableRows = (doneValue) => this.state.todoItems\r\n    .filter(item => item.done === doneValue).map(item=> \r\n    <TodoRow key={item.action} item={item} callback={this.toggleTodo}/>\r\n    );\r\n\r\n  clearAll = () =>\r\n    this.setState({todoItems: []})\r\n\r\n  render(){\r\n    return(\r\n      <div>\r\n        <TodoBanner name={this.state.userName} tasks={this.state.todoItems} />    \r\n        <div className=\"container-fluid\">\r\n            <TodoCreator callback={this.createNewTodo} clearCallBack={this.clearAll}/>            \r\n            <table className=\"table table-striped table-bordered\">\r\n              <thead>\r\n                <tr><th>Description</th><th>Done</th></tr>\r\n              </thead>\r\n              <tbody>{this.todoTableRows(false)}</tbody>\r\n              <tbody>{this.todoTableRows()}</tbody>\r\n            </table>\r\n            <div className=\"bg-secondary text-white text-center p-2\">\r\n              <VisibilityControl description= \"Completed Tasks\"\r\n                isChecked={this.state.showCompleted}\r\n                callback={(checked) => this.setState({showCompleted:checked})} />\r\n            </div>\r\n\r\n            {this.state.showCompleted &&\r\n              <table className=\"table table-striped table-bordered\">\r\n                <thead>\r\n                  <tr><th>Description</th><th>Done</th></tr>\r\n                </thead>\r\n                <tbody>{this.todoTableRows(true)}</tbody>\r\n                </table>}\r\n        </div>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}